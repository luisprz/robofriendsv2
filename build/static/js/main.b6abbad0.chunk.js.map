{"version":3,"sources":["logo.svg","serviceWorker.js","robots.js","components/SearchBox.js","components/Card.js","components/ErrorBoundry.js","components/Cardlist.js","components/Scroll.js","containers/App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","robots","id","name","username","email","SearchBox","searchChange","className","type","placeholder","onChange","Card","alt","src","ErrorBoundry","props","state","hasError","error","info","this","setState","children","Component","Cardlist","map","i","key","Scroll","style","overflowY","border","height","App","onSearchChange","event","searchfield","target","value","filteredRobots","filter","robot","toLowerCase","includes","console","log","length","logo","href","rel","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b6abbad0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export const robots = [ //not export default thats why when importing you need to do destructuring { }\r\n  {\r\n    id: 1,\r\n    name: 'Luis Perez',\r\n    username: 'Luisprz',\r\n    email: 'luisperez@klk.com'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'isaazz',\r\n    username: 'isaazz',\r\n    email: 'isaazz@isaazz.isaazz'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'El engel',\r\n    username: 'Engel',\r\n    email: 'Engel@yesenia.net'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Roman el celdo',\r\n    username: 'Roman',\r\n    email: 'Roman@klk.org'\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Chelsey Dietrich',\r\n    username: 'Kamren',\r\n    email: 'Lucio_Hettinger@annie.ca'\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Robenmy',\r\n    username: 'Robenmy',\r\n    email: 'klk@klk.info'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Kurtis Weissnat',\r\n    username: 'Elwyn.Skiles',\r\n    email: 'Telly.Hoeger@billy.biz'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Nicholas Runolfsdottir V',\r\n    username: 'Maxime_Nienow',\r\n    email: 'Sherwood@rosamond.me'\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Glenna Reichert',\r\n    username: 'Delphine',\r\n    email: 'Chaim_McDermott@dana.io'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Clementina DuBuque',\r\n    username: 'Moriah.Stanton',\r\n    email: 'Rey.Padberg@karina.biz'\r\n  }\r\n];\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n                className='bg-light-green dib br3 pa3 ma2 shadow-3'\r\n                type='search'\r\n                placeholder='Search for robots'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Card = ({ username, email, id, name }) => { //pasas props como propiedades y el ya sabe como app se comunica con los hijos. Card puede saber cuales son las propiedades en app\r\n    //const {username, email, id} = props;\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow shadow-3'>\r\n            <div>\r\n                <img alt='robots' src={`https://robohash.org/${id}}`} /> \r\n                <div>\r\n                    <p>{id}</p>\r\n                    <p>{name}</p>\r\n                    <p>{email}</p>\r\n                    <h2>{username}</h2>\r\n                    \r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Card;","import React, { Component } from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>that is not good</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\nexport default ErrorBoundry;\r\n","import React from 'react';\r\nimport Card from './Card';\r\nimport ErrorBoundry from './ErrorBoundry';\r\n\r\n/*\r\nconst Cardlist = ({robots}) => {\r\n    const cardsArray = robots.map((use, i) => {\r\n        return (<Card \r\n        key={robots[i].id} \r\n        id={robots[i].id} \r\n        username={robots[i].username} \r\n        email={robots[i].email}\r\n\r\n        />); //index.js:1 Warning: Each child in a list should have a unique \"key\" prop. Esto hace que al borrar algo solo se rendee esa parte y no toda la pagina\r\n\r\n    })\r\n    return (\r\n        <div>\r\n            {cardsArray}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cardlist;\r\n\r\n*/\r\nconst Cardlist = ({ robots }) => {\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((username, i) => {\r\n                    return (\r\n                        <Card\r\n                            key={robots[i].id}\r\n                            id={robots[i].id}\r\n                            username={robots[i].username}\r\n                            email={robots[i].email}\r\n                            name= {robots[i].name}\r\n                        />\r\n                    ); //index.js:1 Warning: Each child in a list should have a unique \"key\" prop. Esto hace que al borrar algo solo se rendee esa parte y no toda la pagina\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cardlist;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '2px solid black', height: '450px' }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport logo from '../logo.svg';\r\nimport './App.css';\r\nimport { robots } from '../robots';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Cardlist from '../components/Cardlist';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\n// function App() {\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <header className=\"App-header\">\r\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n\r\n//         <Fragment className='tc'>\r\n//           <h1>Robofriends</h1>\r\n//           <SearchBox />\r\n//           <Cardlist robots={robots} />\r\n//         </Fragment>\r\n//         <a\r\n//           className=\"App-link\"\r\n//           href=\"https://reactjs.org\"\r\n//           target=\"_blank\"\r\n//           rel=\"noopener noreferrer\"\r\n//         >\r\n//           Luis Perez\r\n//         </a>\r\n//       </header>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n\r\n\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      robots: robots, //state\r\n      searchfield: ''\r\n    }\r\n  }\r\n\r\n  // onSearchChange(event) {\r\n  //   console.log(event.target.value);\r\n  // } //it works but as soon as you apply this to work with searchfield state it points to the input in searchbox thats where event is happening! but we need it to point here to searchfield in app class!\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchfield: event.target.value })\r\n  }\r\n\r\n  render() {\r\n    const { robots, searchfield } = this.state;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n    })\r\n    console.log(filteredRobots);\r\n    return !robots.length ?\r\n      <h1>Loading</h1> :\r\n      (\r\n        <div className=\"App\">\r\n          <header className=\"App-header\">\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n\r\n            <div className='tc'>\r\n              <h1>Robofriends</h1>\r\n              <SearchBox searchChange={this.onSearchChange} /> {/*as all is inside app object class, you need to do this.whateverNAme*/}\r\n              <Scroll>\r\n                <ErrorBoundry>\r\n                  <Cardlist robots={filteredRobots} /> {/*here robots is state but cardlist will receive as props*/}\r\n                </ErrorBoundry>\r\n              </Scroll>\r\n            </div>\r\n            <a\r\n              className=\"App-link\"\r\n              href=\"https://reactjs.org\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              <div className='tc bg-black dib br3 pa3 ma2 grow shadow-3'>\r\n                Luis Perez\r\n            </div>\r\n            </a>\r\n          </header>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport App from './containers/App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}